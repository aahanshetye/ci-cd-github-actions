name: CI/CD (Node.js - No Server)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  IMAGE_NAME: ci-cd-github-actions
  # REGISTRY and (for Docker Hub) CONTAINER_NAMESPACE are set as repository Variables

jobs:
  build_test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

  docker_push:
    # Only push images on direct pushes to main (not PRs)
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: build_test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Compute tags
        id: meta
        run: echo "sha_tag=${GITHUB_SHA::7}" >> "$GITHUB_OUTPUT"

      # ---------- Login (per registry) ----------
      - name: Login Docker Hub
        if: vars.REGISTRY == 'dockerhub'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login GHCR
        if: vars.REGISTRY == 'ghcr'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # ---------- Compute repository name safely (no secrets here) ----------
      - name: Set image repository
        id: repo
        run: |
          if [ "${{ vars.REGISTRY }}" = "dockerhub" ]; then
            if [ -z "${{ vars.CONTAINER_NAMESPACE }}" ]; then
              echo "ERROR: Please set repository variable CONTAINER_NAMESPACE to your Docker Hub username." >&2
              exit 1
            fi
            echo "name=${{ vars.CONTAINER_NAMESPACE }}/${{ env.IMAGE_NAME }}" >> "$GITHUB_OUTPUT"
          else
            # ghcr
            echo "name=ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}" >> "$GITHUB_OUTPUT"
          fi

      - name: Build and push image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ steps.repo.outputs.name }}:latest
            ${{ steps.repo.outputs.name }}:${{ steps.meta.outputs.sha_tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  run_and_verify:
    # Also only on push to main (we pull and run what we just pushed)
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: docker_push
    runs-on: ubuntu-latest
    steps:
      - name: Set image repository
        id: repo
        run: |
          if [ "${{ vars.REGISTRY }}" = "dockerhub" ]; then
            echo "name=${{ vars.CONTAINER_NAMESPACE }}/${{ env.IMAGE_NAME }}" >> "$GITHUB_OUTPUT"
          else
            echo "name=ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}" >> "$GITHUB_OUTPUT"
          fi

      - name: Login Docker Hub
        if: vars.REGISTRY == 'dockerhub'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login GHCR
        if: vars.REGISTRY == 'ghcr'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull image
        run: docker pull ${{ steps.repo.outputs.name }}:latest

      - name: Run container
        run: |
          docker run -d --name ci-cd-app -p 3000:3000 \
            -e NODE_ENV=production \
            ${{ steps.repo.outputs.name }}:latest

      - name: Verify /health
        run: |
          for i in {1..10}; do
            if curl -fsS http://localhost:3000/health; then exit 0; fi
            sleep 1
          done
          echo "Health check failed"; docker logs ci-cd-app; exit 1

      - name: Show logs (always)
        if: always()
        run: docker logs ci-cd-app || true
